#include <stdio.h>
#include <limits.h>

#define MAX 10
#define INF 99999

int dist[MAX][MAX], next[MAX][MAX];
int V;

void printMatrix(int k) {
    printf("\nA%d\n", k); 

    printf("\t");
    for (int j = 0; j < V; j++)
        printf("%d\t", j + 1);
    printf("\n");

    for (int i = 0; i < V; i++) {
        printf("%d\t", i + 1); 
        for (int j = 0; j < V; j++) {
            if (dist[i][j] == INF)
                printf("INF\t");
            else
                printf("%d\t", dist[i][j]);
        }
        printf("\n");
    }
}

void printPath(int u, int v) {
    if (next[u][v] == -1) {
        printf("No path\n");
        return;
    }

    printf("%d", u + 1);
    while (u != v) {
        u = next[u][v];
        printf(" -> %d", u + 1);
    }
}

void floydWarshall() {
    for (int k = 0; k < V; k++) {
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                if (dist[i][k] != INF && dist[k][j] != INF &&
                    dist[i][j] > dist[i][k] + dist[k][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                    next[i][j] = next[i][k];
                }
            }
        }
        printMatrix(k + 1); 
    }
}

int main() {
    int E;
    printf("Enter number of vertices: ");
    scanf("%d", &V);
    printf("Enter number of edges: ");
    scanf("%d", &E);

    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (i == j)
                dist[i][j] = 0;
            else
                dist[i][j] = INF;
            next[i][j] = -1;
        }
    }

    printf("Enter edges as: source destination weight\n");
    for (int i = 0; i < E; i++) {
        int u, v, w;
        scanf("%d %d %d", &u, &v, &w);
        u--; v--;
        dist[u][v] = w;
        next[u][v] = v;
    }

    printMatrix(0);
    floydWarshall();

    printf("\nPaths:\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (i != j && dist[i][j] != INF) {
                printPath(i, j);
                printf(": %d\n", dist[i][j]);
            }
        }
    }

    return 0;
}
